/* eslint-disable no-process-exit */
/**
 * @param o
 * @returns {*}
 * Freezes the Object to avoid further changes
 */
const deepFreeze = (o) => {
    Object.freeze(o);
    // eslint-disable-next-line prefer-reflect
    Object.getOwnPropertyNames(o).forEach(function (prop) {
        // eslint-disable-next-line no-prototype-builtins
        if (o.hasOwnProperty(prop) &&
            o[prop] !== null &&
            (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&
            !Object.isFrozen(o[prop])) {
            deepFreeze(o[prop]);
        }
    });

    return o;
};

/**
 * setting global read only variables
 */
global.logger = deepFreeze(require('../logger'));
global.config = deepFreeze(require('../config.js'));
global.CustomError = deepFreeze(require('../middlewares/customErrorMessage'));

/**
 * importing mongodb seeds file for populating initial values
 */
require('../db-seeds/seeds')();

/**
 * module dependencies.
 */
const app = require('../app');
const debug = require('debug')('bus-tickets:server');
const http = require('http');

/**
 * normalize a port into a number, string, or false.
 */

const normalizePort = (val) => {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
    // named pipe
        return val;
    }

    if (port >= 0) {
    // port number
        return port;
    }

    return false;
};

/**
 * get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');

app.set('port', port);

/**
 * create HTTP server.
 */

const server = http.createServer(app);


/**
 * event listener for HTTP server "error" event.
 */

const onError = (error) => {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? `Pipe ${port}`
        : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        console.error(`${bind} requires elevated privileges`);
        process.exit(1);
    case 'EADDRINUSE':
        console.error(`${bind} is already in use`);
        process.exit(1);
    default:
        throw error;
    }
};

/**
 * event listener for HTTP server "listening" event.
 * @return void
 */
const onListening = () => {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? `pipe ${addr}`
        : `port ${addr.port}`;

    debug(`Listening on ${bind}`);
};

/**
 * listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

